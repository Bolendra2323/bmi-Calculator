
https://beta.reactjs.org/

what is react?

1> React is a javascript library

2> The main focus is building UI as fast as possible

3> So this is Used to Single Page Application.

4> Means Complete Website in Single Page


REACT is fast because of the following reasons

1> REACT uses Virtual DOM,Virtual DOM update only Required List ,REACT DOM update complete List

**************************************************************************************************************************************************************************************

//1>> Virtual Dom
https://www.freecodecamp.org/news/a-quick-guide-to-learn-react-and-how-its-virtual-dom-works-c869d788cd44/
***********************************************************************************************************************************

//files -->

1> package.json --> It is one of the most important file . This file consist of version , commands , packages installed 

2> package-lock.json --> This file consist of the details of package.json

Difference betwen package.json and package-lock.json is that 
Package-lock.json stores the entire history of package . It also stores the dependencies of every package

Package.json stores the details of application while package-lock.json stores the key details of node modules and also the details of package.json

.git-ignore--> This file has no relation with react it only deals with GIT , 
               It neglect those files which are not supposed to be pushed to the git. Like Node_modules which we do not want to push to git.
************************************************************************************************************************************


//SRC
In SRC files are present in a systematic manner.
App.css---> App.js--->App.test.js---> index.html---> index.js

App.css is used for styling.

From App.js--->  file we start writing code.

App.test.js---> we write unit test cases 

index.js ---> It is the entry point of the react 

Always remember whenever we create file in REACT always keep its first letter Capital

reportWebVitals--> This file gives the output of performance 
// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals

setupTests --> Setupt of test cases starts from this file
************************************************************************************************************************************

//public folder 
~It consist of HTML kind of details which are not related to REACT
~
***********************************************************************************************************************************
node_modules--> It consist of all the packages

package.json ---> 

package. json holds important information about the project. It contains human-readable metadata about the project (like the project name and description) as well as functional metadata like the package version number and a list of dependencies required by the application.

Note:-> node module files are not pushed to the git , because node modules are heavy on itself because it consist of lot of files and may require lots of time

Now if some other developer pulls our project from git hub , he will not download node modules rather he will run the command npm install and npm install will take the dependencies from package.json and will install it alongwith their internal dependencies.

************************************************************************************************************************************

//Components in REACT.JS

https://beta.reactjs.org/learn/your-first-component

component basic meaning --> A part or element of a large whole specially a large component

In react---> 

It is a piece of code that can be re-used

Example--> function

But more powerful then function. Header , footer is the best example 

Types of component --> functional component, class component , higher order component , pure component , controlled component , uncontrolled component 


yes it is possible to create component inside component and we have to call that component inside that component only or else it will not work
************************************************************************************************************************************

*************
JSX in REACT
*************

https://beta.reactjs.org/learn/writing-markup-with-jsx

please keep in mind that import is a javascript functionality
************************************************************************************************************************************

*********************************
Click Event and Function in REACT
*********************************

https://beta.reactjs.org/learn/responding-to-events#adding-event-handlers

************************************************************************************************************************************

*****************************
state in functional component
******************************


https://beta.reactjs.org/learn/state-a-components-memory#recap

state is basically a object where we can store data.
If we use variable then our component don't get updated
whereas in order update component we can use state. State is present inside react only

************************************************************************************************************************************

************************
state in class component
*************************

https://beta.reactjs.org/reference/react/PureComponent#skipping-unnecessary-re-renders-for-class-components

Note that we can use state outside of the component and it is not recommended to use outside of the component

We cannot use 'useState' inside class Component

************************************************************************************************************************************

*******************************
Props with functional component
*******************************

https://reactjs.org/docs/components-and-props.html

Just like we used to pass parameters inside parenthesis of function. Similarly we use props to pass values inside component
We use Props to transfer data from one component to another.

Just like we pass parameters inside the parenthesis of a function, similarly we pass props inside component.
Props can be called as properties

************************************************************************************************************************************

***************************
Props with class Component
***************************

Just like we used to pass parameters inside parenthesis of function. Similarly we use props to pass values inside component
We use Props to transfer data from one component to another.

Just like we pass parameters inside the parenthesis of a function, similarly we pass props inside component.
Props can be called as properties

Note that--> We cannot change the value of props in the component where we are receiving the props but we can change the
value of props in the parent component.Here App.js is the parent component and Student.js is the child component.

************************************************************************************************************************************

*******************************
Conditional Rendering in REACT
*******************************

https://www.freecodecamp.org/news/conditional-rendering-in-react-using-ternaries-and-logical-and-7807f53b6935/

************************************************************************************************************************************

Basic FORM Validation

Form validation code is written in Login.js file

************************************************************************************************************************************

Pass function as props

https://www.freecodecamp.org/news/how-to-use-props-in-reactjs/

************************************************************************************************************************************

Life cycle method

https://blog.bitsrc.io/react-16-lifecycle-methods-how-and-when-to-use-them-f4ad31fb2282

Life cycle method in react is executed during the following scenario:

:- When Component is Loaded
:- When Component is updated with state and props
:- When Component is removed.

************************************************************************************************************************************

constructor Life Cycle method

https://www.w3schools.com/react/react_lifecycle.asp

Note :- We cannot directly use life cycle method inside functional Component. But in order to use life cycle method
inside functional Component we have to use hooks.

constructor is a life cycle method and when whenever we write class component this constructor will be included.

Whenever we create class component and inside render method we write some html and constuctor gets ready before the 
initialisation of the html component

Important:- https://medium.com/devinder/why-api-call-is-recommended-in-componentdidmount-38c8c3c57834#:~:text=Summary%3A,render()%2C%20i.e%20componentDidMount().


************************************************************************************************************************************


Render Life cycle method

https://www.w3schools.com/react/react_lifecycle.asp

use of render method:- It helps to redirect the HTML page with the help of the render() function. 
It can be immutable in a certain scenario when you create an element and then you can define it as constant, 
hence it would not allow changing this

Whenever state and props get updated then in that case render method gets executed automatically
************************************************************************************************************************************

componentdidmount life cycle method

https://www.freecodecamp.org/news/how-to-understand-a-components-lifecycle-methods-in-reactjs-e1a609840630/

usecase of componentDidMount:-
1:- Whenever we want to call API we use componentDidMount.
2:- componentDidMount is called whenever our HTML, DOM gets completely ready.
3:- Operation such Hide and Show are done inside componentDidMount.
4:- Any operation which is dependent on completion of HTML is done inside componentDidMount

************************************************************************************************************************************

componentDidUpdate

https://www.freecodecamp.org/news/how-to-understand-a-components-lifecycle-methods-in-reactjs-e1a609840630/

The componentDidUpdate() method allows us to run React code when the component is updated. 
Any network requests that must be made when the details are passed to the component change are coded here

The componentDidMount() will work only when state and props gets updated

************************************************************************************************************************************

ShouldComponentUpdate Life Cycle method


https://www.geeksforgeeks.org/what-does-shouldcomponentupdate-do-and-why-is-it-important/


The shouldComponentUpdate is a lifecycle method in React. This method makes the component to re-render only 
when there is a change in state or props of a component and that change will affect the output.

Every component in React goes through a lifecycle of events. I like to think of them as going through a cycle of birth, growth, and death.

Mounting – Birth of your component
Update – Growth of your component
Unmount – Death of your component

1. Regardless of React Components, constructors are always ran first 
	1. In constructor, you will just initialize the state in constructor
2. Render runs second, which determines what to show. This is the template 
   of the HTML and dictates the UI is going to be.
3. Third one that runs is componentDidMount, React runs the constructor, 
   runs the render and mounts the initial state and mounts on. Then it 
   will runs the code in componentDidMount();
   
- When setState() is called, the render() method will be called again and 
  re-renders.
	- Every subsequent child with a different props will also be re-rendered.

Initialization = setup props & state

// Lifecycle Phase 
1. mounting // Born
2. update   // Growth
3. unmounting //Dead

// lifecycle method
mounting = constructor->render->componentDidMount
update = render->componentDidUpdate
unmounting = componentWillUnmount

Class components have lifecycle methods. These for the most part are what useEffect does for function components. 
They're for doing things like making API calls, starting and ending transitions/animations, debugging, and other things 
like that. We don't need to use any here, but let's look at a few of the most common ones

constructor isn't necessarily a React lifecylce method but we use it like one. It's where you do things that need to
 happen before the first render. Generally it's where you set the initial state.
componentDidMount is a function that's called after the first rendering is completed. This pretty similar to a useEffect
 call that only calls the first time. This is typically where you want to do data fetching. It doesn't have to be async; 
 we just made it async here to make the data fetching easy.
componentDidUpdate is called after your state is updated. If you're doing something like Typeahead where you're making
 reactive requests to an API based on user input, this would be an ideal place to do it.
componentWillUnmount is typically a place for cleanup. Let's say you had to write a component to integrate with jQuery
 (I've had to write this, multiple times), this is where you'd clean up those references (like unattaching from DOM nodes
  and deleting them) so you don't leak memory. This method is invoked whenever a component is about to be destroyed.
This class doesn't cover all the lifecycle methods but you can imagine having different timings for different 
capabilities of a component can be useful. For example, if you have a set of props that come in and you need to
 filter those props before you display them, you can use getDerivedStateFromProps. Or if you need to react to your 
 component being removed from the DOM (like if you're subscribing to an API and you need to dispose of the subscription)
  you can use componentWillUnmount.

There are lots more you can check out in the React docs here.

shouldComponentUpdate blocks the rendering by itself

************************************************************************************************************************************

componentWillUnmount

https://www.geeksforgeeks.org/reactjs-componentwillunmount-method/

************************************************************************************************************************************

Hooks in reactjs

https://www.freecodecamp.org/news/the-beginners-guide-to-react-hooks/#:~:text=What%20are%20React%20Hooks%3F,with%20the%20word%20%22use%22%20.


If we want to use life cycle method inside functional Component then we use hooks

With Hook, we can use class component features in functional component such as state, life-cycle, pure component etc

What are React Hooks? Hooks are built-in React functions introduced in React version 16.8. They allow you to use features
 of the React library like lifecycle methods, state, and context in functional components without having to worry 
 about rewriting it to a class. Each React Hook name is prefixed with the word "use"

useState is a hook
const[data,setData]=useStat("Bolendra")
here by default value of data is Bolendra
One of biggest sign to identify hook is that it begins with a letter use

************************************************************************************************************************************

useEffect hook in React.js

https://www.freecodecamp.org/news/react-useeffect-absolute-beginners/

:- whenever any component is created then this useEffect hook will be called
:- Whenever state is updated then this useEffect hook will be called


************************************************************************************************************************************


useEffect with specific state and props

https://reactjs.org/docs/hooks-effect.html

************************************************************************************************************************************

Style Type in React.js

https://www.freecodecamp.org/news/style-react-apps-with-css/

************************************************************************************************************************************

Handle Array with list

https://reactjs.org/docs/lists-and-keys.html

why to use map instead of for loop while handling array with list

Reason:- https://blog.hackages.io/why-i-stopped-using-for-loops-and-started-mapping-instead-5f6b579a0525
Another Reason:- Inside return statement map function supports but for loop doesn't supports

************************************************************************************************************************************

List with Bootstrap table and unique key

https://react-bootstrap.github.io/getting-started/introduction

************************************************************************************************************************************


React Fragment

https://reactjs.org/docs/fragments.html

React Fragment:- It is a pattern which is used to handle multiple elements or multiple components

Example of Elements :- <h1> tag,
Example of components:- Functional Component , Class Component

*************************************************************************************************************************************

Send Data Child to Parent Component

https://reactjs.org/docs/lifting-state-up.html

*************************************************************************************************************************************

Pure component in React.js

https://www.geeksforgeeks.org/reactjs-pure-components/


pure component stops the re-rendering(Continuously executing) of the component

*************************************************************************************************************************************

useMemo Hook in React.js

:- useMemo hook enhances the performance of the application
:- Just like we use pure component in class based component similarly we use  useMemo in functional component

*************************************************************************************************************************************

Ref in react 

https://reactjs.org/docs/refs-and-the-dom.html

According to React.js we shouldn't manipulate DOM but using ref can manipulate DOM . That's  why ref is used only in emergency situation
Ref can manipulate DOM directly

*************************************************************************************************************************************

//use Ref in react.js

https://www.w3schools.com/react/react_useref.asp

use Ref is a kind of hook which can be used only in functional Component

Whenever we want to manipulate DOM we use 'useRef'

One Important point to note is that every hook in React starts with letter 'use'

*************************************************************************************************************************************

// Forward Ref

https://reactjs.org/docs/forwarding-refs.html

*************************************************************************************************************************************

// Controlled component

// https://blog.logrocket.com/controlled-vs-uncontrolled-components-in-react/#:~:text=What%20are%20controlled%20components%20in,server%20to%20perform%20an%20action.

Controlled components in React are those in which form data is handled by the component's state. 
Forms are used to store information in a document section. The information from this form is typically sent to a server to perform an action

In React whenver we control the input fields via state then it is called as controlled component

*************************************************************************************************************************************

// Uncontrolled Component

https://reactjs.org/docs/uncontrolled-components.html

// controlled
- In a controlled component, form data is handled by a React component.

// uncontrolled
- The alternative is uncontrolled components, where form data is handled
by the DOM itself. To write an uncontrolled component, instead of
writing an event handler for every state update, you can use a ref 
to get form values from the DOM.


In Uncontrolled component there should always be an input field and these input field shouldn't be controlled by react state
but instead these input field should be controlled by javascript or by ref 

*************************************************************************************************************************************

// Simple HOC

https://reactjs.org/docs/higher-order-components.html

Higher order component are those component which takes input as a component also gives output as a component

*************************************************************************************************************************************

// React-Router V6 Tutorial

https://reactrouter.com/en/main/start/tutorial

*************************************************************************************************************************************

// React Router v6 404 Page Not Found and Redirect

https://bobbyhadz.com/blog/react-router-not-found-page

*************************************************************************************************************************************
// React Router v6 tutorial in Hindi #4 dynamic Routing with params

https://medium.com/@s.alexis/using-react-router-useparams-to-fetch-data-dynamically-13288e24ed1#:~:text=React%20Router%20is%20a%20library,access%20params%20in%20an%20URL.

*************************************************************************************************************************************

// React Router v6 tutorial in Hindi #5 Link and Nav Link style

note:- We cannot give className to Link
*************************************************************************************************************************************

// Active link in navbar

*************************************************************************************************************************************

// Use search Param hooks

// Search Param Hooks:- This hooks belongs to React-Router Hook and not ReactJs Hook

https://www.freecodecamp.org/news/a-complete-beginners-guide-to-react-router-include-router-hooks/

https://reactrouter.com/en/main/hooks/use-search-params

https://www.robinwieruch.de/react-router-search-params/

*************************************************************************************************************************************

React Router v6 Navigation on Click | Navigating programmatically

https://stackabuse.com/programmatically-navigate-using-react-router/

Conditional Routing:- 

https://dev.to/salehmubashar/conditional-routing-with-react-router-v6-229g

https://tealfeed.com/conditional-routing-react-router-v6-ff2lh

*************************************************************************************************************************************

Nested Routing

https://www.robinwieruch.de/react-router-nested-routes/

*************************************************************************************************************************************

useLocation Hooks

https://www.educative.io/answers/how-to-use-the-uselocation-hook-in-react

Whenever we move from one route to another route a unique key is generated of that route

*************************************************************************************************************************************

protected Route

https://www.positronx.io/react-protected-routes-with-react-router-tutorial/

In protected Route every page is redirected to login page. 
So only after successfull login person can access the other pages.

*************************************************************************************************************************************

React -Routing

https://www.geeksforgeeks.org/reactjs-router/

https://github.com/Ephem/react-router-wrapper

We should not use <Router> More then one in our app. That is why we have used BrowserRouter only in index.js 
and once the wrapper "<Router>" is wrapped inside <App/> then we don't have to use <BrowserRouter> inside App.js file

************************************************************************************************************************************

404page  - Page not found

https://www.makeuseof.com/react-router-404-page-create/

************************************************************************************************************************************

React -Dynamic Routing

dynamic routing is the time at which the routing takes place. In dynamic routing, routes are initialized dynamically 
when the page gets rendered. This means almost everything is a component in the React Router.

https://blog.webdevsimplified.com/2022-07/react-router/

************************************************************************************************************************************

REACT-fetch API | GET method

https://codedamn.com/news/reactjs/reactjs-fetch-api-example


API:- Application programming interface

In API data is stored in the json format.

************************************************************************************************************************************


















